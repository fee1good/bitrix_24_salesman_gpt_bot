apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "telegram-bot.fullname" . }}
  labels:
    {{- include "telegram-bot.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "telegram-bot.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "telegram-bot.selectorLabels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ .Values.serviceAccount.name }}
      volumes:
        - name: secrets-store
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: "secret-provider-class"
      initContainers:
        - name: liquibase
          image: "{{ .Values.image_liquibase.repository }}:{{ .Values.image_liquibase.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image_liquibase.pullPolicy }}
          args: [
            "--changeLogFile=initial.postgres.yaml",
            "--url=jdbc:postgresql://$(DB_HOST):5432/$(POSTGRES_DB)",
            "update"
          ]
          env:
            - name: LIQUIBASE_COMMAND_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secret.name }}
                  key: POSTGRES_USER
            - name: LIQUIBASE_COMMAND_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secret.extra_name }}
                  key: POSTGRES_PASSWORD
          envFrom:
            - secretRef:
                name: {{ .Values.secret.name }}
            - secretRef:
                name: {{ .Values.secret.extra_name }}
      containers:
        - name: telegram-bot
          image: "{{ .Values.image_bot.repository }}:{{ .Values.image_bot.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image_bot.pullPolicy }}
          ports:
            - containerPort: {{ .Values.webhook.port }}
              name: webhook-port
            - containerPort: {{ .Values.metrics.port }}
              name: metrics-port
          volumeMounts:
            - name: secrets-store
              mountPath: "/mnt/secrets-store"
              readOnly: true
          envFrom:
            - secretRef:
                name: {{ .Values.secret.name }}
            - secretRef:
                name: {{ .Values.secret.extra_name }}
          env:
            - name: WEBHOOK_URL
              value: {{ .Values.ingress.host }}
            - name: S3_IMAGES_UPLOAD_BUCKET
              value: {{ .Values.s3.bucket }}
            - name: S3_IMAGES_UPLOAD_DESTINATION
              value: {{ .Values.s3.destination }}

